# list comprehension - генераторы списков
# сначала покажу как делать генерацию списка квадратов, но не удачный вариант

N = 7
# a = [0]*N
# for i in range(N):
#     a[i] = i**2
a = [x**2 for x in range(N)]    # вот более удачный вариант и он работает быстрее и является более понятным
print(a)                        # переменная x является локальной и пропадает за пределами генератора

# его можно описать как [<способ формирования значения> for <переменная> in <итерируемый объет>]
a = [x%4 for x in range(N)]  # список остатков деления на 4, как ещё один пример
print(a)

# d_inp = input("Числа через пробел: ")
# a = [int(d) for d in d_inp.split()]
# print(a)

c = [x for x in range(-5,5) if x < 0]
print(c)

# можно использовать тернарный условный оператор в <способ формирования значения>
d = [2, -4, 20, 10, 55, 37, 101, 102, 1001, 2000, 8]
a = ["четное" if x %2 ==0 else "нечетное" for x in d]  # конструкция "четное" if x %2 ==0 else "нечетное" --- ТЕРНАРНЫЙ ОПЕРАТОР
print(a)

A = ["ev" if x % 2 ==0 else "odd"                      #можно делать так и делать многострочную конструкцию
     for x in d
     if x > 0]
print(A)

a = [(i , j)            # в данной конструкции один for вложен в другой, форма такая для наглядности
     for i in range(3) if i % 3 == 0 # логика такая же как и для вложенных циклов
     for j in range(4) if j % 2 == 0
    ]
print(a)

mul_tab = [f"{i}*{j} = {i*j}"
           for i in range(4)
           for j in range(4)
           ]
print(mul_tab)

matrix = [[0, 1, 2, 3],
          [10, 11, 12, 13],
          [20, 21, 22, 23]
          ]

A = [x
     for row in matrix
     for x in row]
print(A)