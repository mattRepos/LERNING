def get_v(a, b, c, verbose=True):  # vervose-формальный аргумент,который имеет значение по умолчанию, а abc - формальные
    if verbose:
        print(f'a = {a},b = {b},c = {c}')

    return a + b + c


V = get_v(1, 2, 3)  # позицонная запись аргументов
V = get_v(b=1, c=2, a=3)  # именованная запись аргументов
print(V)
# позиционные и именнованные аргументы можно комбинировать, но сначала пишут позиционные, а потом именованные
# V = get_v(1, 2, с=3) вот пример
# формальные аргументы нужны чтобы менять поведение функции при необходимости
# если в качестве формального параметра указывать изменяемый тип данных, то стоит помнить, что питон работает по ссылкам
# и что может получится так, что вместо чистого тип изм. данных может формироваться наполненный, нужно отдельно пропс.
# поведение. Дальше пример с учетом такой особенности

def add_value(value, lst = None):
    if lst is None:
        lst = []
    lst.append(value)
    return lst
l = add_value(1)
l = add_value(2, l) # здесь явно указано какой список получает функция и куда добавлять значение
print(l)
l = add_value(3, None)
print(l)