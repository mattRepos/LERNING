def say_name(name):
    def say_goodbye():
        print("Good Bye" + name + "!")

    say_goodbye()


say_name("<NAME>")  # вот так работает замыкание, мы как бы вызываем функцию из функции, причем внут функция, может
# работать когда внешняя уже завершилась, если бы мы поставили return say_goodbye(), то получали бы ссылку на функцию
# ее можно потом присвоить переменной и вызвать. данная ссылка будет работать из-за неявной ссылки внешнего окружения
# замыканием называется это из-за того, что "мы держим" замыкающиеся вызовы, если также вызовем с разными окр-ми
# то будет сделано новое независимое окружение для второго ссылочного обращения

def counter(start = 0 ):
    def step():
        nonlocal start  # для того чтобы внутри функции step использовали переменную из внеш окр-ия, а не делали локал-ю
        start += 1
        return start

    return step


c1 = counter(10)
c2 = counter()
print(c1(), c2())
print(c1(), c2())
print(c1(), c2())