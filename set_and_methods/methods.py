setA = {1, 2, 3, 4}
setB = {3, 4, 5, 6, 7}
inter = setA & setB  # объединение двух множеств, читается как setA И setB, если нет общих членов, то будет пустое множество
print(inter)
setA.intersection(setB)  # тоже самое что и setA & setB, но возвращается только новое множество, а исх не изменяются
setA.intersection_update(setB)  # сохраняет пересечения множеств в setA
setAA = {1, 2, 3, 4}
setBB = {3, 4, 5, 6, 7}
OR = setAA | setBB  # объединение двух множеств которое возвращет множество именно объединенния а не исключения
# & отличается от | тем, что возвращает множество которое содержит только общие элементы, а не
# элементы обоих множеств

setAA |= setBB  # объединение и сохранение всего в множестве AA
setAA.union(setBB)  # именно объединение с помощью метода, возвращается новое множество, исходнные не меняются

setA1 = {1, 2, 3, 4}
setB1 = {3, 4, 5, 6, 7}

print(setA1 - setB1)  # получаем множество, которое не содежит элементы второго множества (второго операнда вычитания)
print(setB1 - setA1)  # получаем противоположное, множество setB1, которое не содержит элементы setA1
# для таких операций можно использовать операнды, например, -=
print(setA1 ^ setB1)  # операция симметричной разности, возвращается уникальные элементы, выводятся все кроме уник эл.

# множества считаются равными, если у них совпадает длина и значения элементов совпадает (==)||(!=)
